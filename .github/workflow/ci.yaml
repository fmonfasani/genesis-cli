name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12"]
        exclude:
          # Reducir matriz para ahorrar recursos
          - os: windows-latest
            python-version: 3.8
          - os: macos-latest
            python-version: 3.8
          - os: windows-latest
            python-version: 3.9
          - os: macos-latest
            python-version: 3.9

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip packages
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/pyproject.toml') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev,test]"

    - name: Check code formatting with black
      run: |
        black --check --diff .

    - name: Check import sorting with isort
      run: |
        isort --check-only --diff .

    - name: Lint with flake8
      run: |
        flake8 .

    - name: Type checking with mypy
      run: |
        mypy genesis_cli/

    - name: Security check with bandit
      run: |
        bandit -r genesis_cli/

    - name: Run tests with pytest
      run: |
        pytest --cov=genesis_cli --cov-report=xml --cov-report=term-missing --cov-fail-under=80

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  docs:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install documentation dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[docs]"

    - name: Build documentation
      run: |
        mkdocs build --strict

    - name: Deploy documentation
      if: github.ref == 'refs/heads/main'
      run: |
        mkdocs gh-deploy --force

  security:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"

    - name: Run security checks
      run: |
        bandit -r genesis_cli/ -f json -o bandit-report.json
        safety check

    - name: Upload security report
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: security-report
        path: bandit-report.json

  build:
    runs-on: ubuntu-latest
    needs: test

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine

    - name: Build package
      run: |
        python -m build

    - name: Check package
      run: |
        twine check dist/*

    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: dist
        path: dist/

  integration:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install genesis-cli
      run: |
        python -m pip install --upgrade pip
        pip install -e .

    - name: Test CLI installation
      run: |
        genesis --version
        genesis --help

    - name: Mock genesis-core for integration tests
      run: |
        # Mock genesis-core para tests de integración
        mkdir -p mock_genesis_core
        echo "class CoreOrchestrator: pass" > mock_genesis_core/__init__.py

    - name: Run integration tests
      run: |
        pytest tests/ -m "integration" -v

  performance:
    runs-on: ubuntu-latest
    needs: test
    if: github.event_name == 'pull_request'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: "3.11"

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -e ".[dev]"
        pip install pytest-benchmark

    - name: Run performance tests
      run: |
        pytest tests/ -m "not slow" --benchmark-only --benchmark-json=benchmark.json

    - name: Upload performance report
      uses: actions/upload-artifact@v3
      with:
        name: performance-report
        path: benchmark.json

  notify:
    runs-on: ubuntu-latest
    needs: [test, docs, security, build]
    if: always()

    steps:
    - name: Notify on success
      if: needs.test.result == 'success' && needs.docs.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All CI checks passed successfully!"

    - name: Notify on failure
      if: needs.test.result == 'failure' || needs.docs.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Some CI checks failed. Please review the logs."